import pytest
from blankly import StrategyState

from quantipy.strategies.stochastic import AdvancedHarmonicOscillators, event
from quantipy.position import Position

# fmt: off
BUY_DATA = [148.772012725778,127.75644285338879,71.48580326501973,183.5389649265939,17.75500112198094,142.6318888223258,165.68017372943567,147.0243719096652,197.49130248072117,157.08242253125897,126.69844097064676,47.86275740196344,161.33108977612076,111.30549826938017,183.47406260346128,119.26025642503899,79.03173532330977,81.31982748682083,196.9310488675943,132.26261327963087,71.98023770566414,127.8017734341947,40.59298895205494,88.09025628660324,14.858608521042658,193.83394605842307,116.07246032850098,27.34190513356574,59.71622208768774,43.59477794089548,110.7052002466568,143.06591955410875,166.15735291801616,156.98309085205497,81.90560021889513,177.44474205714744,189.58590069738636,115.59246677835522,54.61260689896678,72.74141447153946,169.5208185145544,195.3058583029298,61.686493208169885,118.35268978381343,199.34913168095986,180.49492191303995,43.40378616814278,63.4190916333923,111.82767200232368,51.41947886024478,32.305517355506126,184.45747119516855,151.63603803901418,73.9010345255736,195.19240386291378]
SELL_DATA = [1787.66,1785.66,1785.44,1789.58,1789.51,1785.68,1786.53,1785.62,1785.81,1781.59,1782.93,1781.25,1777.74,1779.41,1779.96,1782.72,1783.2,1779.47,1778.47,1775.01,1777.08,1778.61,1777.13,1769.47,1773.34,1775.56,1776.63,1774.95,1774.12,1776.79,1777.34,1775.14,1776.93,1778.86,1779.44,1780.38,1783.3,1784.7,1785.4,1786.61,1786.92,1785.68,1783.24,1790.01,1787.95,1790.46,1795.05,1793.92,1793.04,1794.0,1794.66,1796.68,1792.9,1790.0,1788.15,1794.34,1796.25,1798.67,1797.09,1791.01,1792.99,1794.29,1799.71,1802.25,1794.76,1801.15,1804.82,1799.12,1795.82,1794.88,1792.88,1796.32,1792.11,1783.45,1785.25,1782.88,1783.81,1785.19,1787.47,1782.09,1781.41,1784.58,1786.86,1784.49,1788.44,1793.58,1818.76,1822.4,1817.82,1808.3,1813.78,1810.28,1816.87,1819.68,1808.17,1815.0,1818.83,1814.84,1819.0,1814.42,1819.03,1813.04,1813.7,1793.27,1799.21,1798.18,1799.42,1802.56,1800.5,1798.23,1800.0,1804.77,1810.29,1808.3,1808.68,1807.74,1808.57,1809.99,1812.59,1808.0,1810.52,1808.2,1804.05,1800.97,1795.0,1798.34,1801.56,1803.1,1803.79,1800.75,1795.15,1794.29,1791.26,1795.84,1800.25,1799.43,1802.71,1802.85,1802.92,1801.57,1812.0,1806.32,1798.24,1801.52,1794.29,1799.7,1800.42,1791.9,1792.07,1796.32,1802.78,1800.88,1800.45,1799.93,1807.3,1806.96,1806.08,1812.4,1812.16,1808.23,1805.64,1808.78,1810.98,1810.62,1814.98,1818.87,1818.04,1816.26,1813.35,1810.84,1812.43,1812.01,1811.4,1809.3,1809.02,1806.48,1801.43,1802.49,1803.54,1806.54,1806.75,1806.36,1804.08,1803.94,1803.98,1802.63,1795.18,1795.87,1799.69,1796.0,1815.12,1806.09,1801.09,1804.93,1788.1,1792.52,1793.33,1799.11,1797.66,1799.48,1808.66,1821.55,1820.62,1845.59,1834.46,1843.14,1850.0,1847.08,1843.87,1849.82,1840.21,1848.44,1845.9,1850.57,1848.57,1865.29,1857.49,1855.1,1862.2,1865.01,1858.44,1857.03,1851.78,1840.35,1835.83,1839.36,1835.47,1835.53,1835.0,1830.49,1833.32,1830.68,1834.94,1837.28,1836.47,1835.31,1836.74,1832.68,1836.1,1829.35,1824.51,1818.89,1816.59,1806.91,1803.61,1795.26,1800.32,1796.27,1805.94,1805.58,1806.56,1808.86,1811.51,1805.01,1806.01,1801.93,1803.0,1799.56,1798.47,1799.4,1800.72,1791.79,1788.93,1785.0,1790.01,1795.75,1796.87,1795.87,1799.1,1796.45,1789.75,1794.04,1797.45,1800.05,1796.73,1799.4,1798.29,1801.49,1798.21,1792.93,1787.89,1787.58,1787.51,1787.87,1789.97,1790.79,1796.23,1795.13,1807.03,1810.58,1806.29,1810.76,1812.23,1812.71,1816.01,1809.0,1806.05,1821.0,1815.69,1813.41,1818.79,1828.19,1827.37,1831.59,1829.82,1825.65,1830.23,1830.23,1830.98,1828.46,1828.35,1824.07,1834.99,1835.71,1832.44,1830.84,1835.7,1832.43,1828.96,1828.28,1828.63,1833.21,1832.02,1838.4,1834.79,1836.14,1838.8,1841.35,1839.59,1844.44,1840.38,1839.61,1837.59,1841.16,1838.83,1837.29,1835.74,1834.38,1831.72,1830.99,1831.2,1830.02,1832.69,1834.52,1837.05,1834.84,1836.36,1837.62,1834.2,1837.33,1837.53,1845.31,1842.87,1846.31,1856.28,1864.4,1855.38,1850.67,1845.7,1849.28,1852.56,1846.28,1854.02,1858.98,1888.21,1880.15,1882.09,1883.32,1888.34,1882.73,1878.71,1881.2,1886.52,1887.99,1881.23,1883.29,1885.34,1885.01,1888.15,1891.47,1888.56,1895.24,1891.73,1885.0,1870.4,1878.41,1878.59,1877.07,1874.74,1879.55,1882.16,1896.11,1901.07,1896.0,1893.85,1896.29,1888.89,1893.69,1887.36,1875.84,1865.53,1876.17,1886.14,1894.42,1892.71,1896.09,1895.58,1899.0,1887.09,1883.03,1887.24,1886.16,1887.2,1879.51,1877.94,1871.7,1873.16,1875.57,1877.19,1876.11,1878.81,1875.59,1885.0,1884.89,1886.03,1891.85,1894.52,1893.15,1897.72,1901.07,1905.0,1894.94,1896.11,1909.4,1912.46,1908.26,1900.52,1895.71,1895.59,1892.45,1897.52,1887.85,1894.36,1897.61,1901.35,1893.2,1894.11,1890.47,1892.53,1896.45,1902.96,1894.82,1900.8,1894.54,1891.58,1891.62,1894.0,1888.96,1881.66,1887.55,1888.85,1889.05,1892.23,1892.25,1894.11,1893.53,1893.02,1891.55,1892.13,1888.61,1889.68,1882.79,1876.01,1878.63,1869.31,1875.71,1873.91,1874.35,1878.17,1873.98,1873.56,1876.92,1878.3,1870.0,1861.6,1867.4,1859.42,1865.49,1873.02,1886.26,1892.22,1890.32,1895.03,1892.57,1902.21,1896.0,1896.0,1882.39,1882.8,1885.42,1886.39,1884.55,1886.13,1889.51,1890.01,1891.27,1887.85,1885.3,1881.32,1881.23,1886.04,1880.08,1878.99,1877.52,1879.9,1880.84,1876.4,1877.76,1877.59,1880.08,1885.15,1887.4,1884.62,1881.51,1882.25,1885.74,1883.0,1881.94,1889.09,1888.41,1887.55,1884.63,1888.58,1890.42,1899.38,1894.53,1892.3,1896.92,1899.06,1895.0,1899.55,1896.11,1895.66,1886.4,1888.3,1891.73,1891.01,1894.25,1888.61,1887.37,1897.84,1902.09,1901.81,1913.89,1918.16,1913.48,1920.32,1919.31,1922.0,1916.74,1918.32,1922.67,1926.84,1920.47,1914.32,1913.27,1917.03,1913.0,1914.65,1913.15,1912.86,1907.59,1911.88,1916.33,1913.07,1913.81,1921.51,1937.32,1988.03,2012.65,2040.79,2010.72,2019.59,2013.79,2027.46,2012.01,2002.14,2004.38,2019.74,2017.51,2033.68,2072.22,2058.84,2081.77,2096.7,2100.15,2121.32,2112.51,2100.55,2107.44,2108.42,2112.78,2121.88,2115.39,2121.62,2120.76,2130.72,2131.95,2123.49,2107.49,2108.63,2102.23,2102.86,2091.0,2097.23,2099.07,2102.88,2097.56,2090.47,2095.58,2097.1,2080.78,2086.66,2086.66,2075.5,2075.63,2077.3,2087.99,2090.48,2096.82,2093.44,2092.93,2095.33,2096.38,2094.71,2093.85,2086.66,2086.54,2087.78,2094.43,2092.79,2085.34,2082.98,2080.04,2078.0,2085.03,2078.2,2055.67,2049.22,2035.21,2047.05,2049.77,2049.16,2040.44,2046.8,2054.71,2056.91,2053.46,2056.24,2059.2,2054.96,2053.1,2049.51,2060.91,2063.86,2057.9,2059.45,2057.32,2057.33,2062.92,2059.28,2056.26,2063.13,2078.38,2080.24,2073.13,2070.19,2070.25,2085.99,2080.01,2071.16,2073.23,2075.39,2075.2,2077.18,2071.59,2060.44,2053.17,2047.81,2043.81,2044.73,2043.94,2051.42,2044.93,2032.83,2033.18,2038.53,2045.08,2039.88,2043.65,2050.54,2048.66,2050.0,2047.7,2052.44,2054.42,2055.2,2056.64,2059.03,2058.33,2057.3,2054.65,2050.92,2049.43,2048.91,2052.77,2048.18,2040.99,2045.95,2045.72,2050.63,2056.92,2058.19,2049.54,2057.45,2056.41,2051.09,2051.69,2050.87,2046.94,2054.38,2047.9,2050.53,2048.34,2052.25,2061.59,2061.79,2058.96,2061.29,2041.92,2044.51,2043.61,2056.86,2071.72,2063.95,2062.87,2064.84,2051.01,2041.73,2043.02,2042.81,2036.13,2040.22,2032.03,2039.42,2049.3,2050.0,2056.83,2060.74,2056.13,2056.79,2050.0,2056.99,2048.16,2046.38,2047.24,2054.91,2053.26,2048.0,2066.18,2075.43,2086.72,2104.76,2109.58,2086.31,2081.11,2080.13,2086.28,2091.03,2097.89,2100.67,2097.05,2085.8,2072.24,2062.85,2064.68,2058.98,2069.32,2054.98,2045.31,2032.75,2046.97,2046.68,2051.78,2054.14,2055.71,2057.08,2049.22,2054.61,2058.09]
# fmt: on


class TestStrategy(AdvancedHarmonicOscillators):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self._enable_buy = False
        self._enable_sell = False

    def _dummy_init(self, symbol: str) -> None:
        self.data[symbol]["close"] = []

    def enable_buying(self, yn: bool = True) -> None:
        self._enable_buy = yn

    def enable_selling(self, yn: bool = True) -> None:
        self._enable_sell = yn

    @property
    def buying_enabled(self) -> bool:
        return self._enable_buy

    @property
    def selling_enabled(self) -> bool:
        return self._enable_sell

    def reset(self) -> None:
        self._enable_buy = False
        self._enable_sell = False

    @event("buy")
    def b(self, price: float, symbol: str, state: StrategyState) -> Position:
        return self.manager.order(price, symbol, state)

    @event("sell")
    def s(self, price: float, symbol: str, state: StrategyState) -> Position:
        return self.manager.order(price, symbol, state, side="sell")

    def buy(self, symbol: str) -> bool:
        if self.buying_enabled:
            return super().buy(symbol)
        return False

    def sell(self, symbol: str) -> bool:
        if self.selling_enabled:
            return super().sell(symbol)
        return False


def test_advanced_harmonic_oscillators_buy_signal(exchange):
    strategy = TestStrategy(exchange)
    strategy.enable_buying()
    symbol = "FOO-USD"
    strategy.data[symbol]["close"] = BUY_DATA
    assert strategy.buy(symbol)


def test_advanced_harmonic_oscillators_sell_signal(exchange):
    strategy = TestStrategy(exchange)
    strategy.enable_selling()
    symbol = "FOO-USD"
    strategy.data[symbol]["close"] = SELL_DATA
    assert strategy.sell(symbol)
